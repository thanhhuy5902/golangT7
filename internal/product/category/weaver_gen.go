// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package category

import (
	"cakho.com/tudye/domain/product"
	"context"
	"errors"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "cakho.com/tudye/internal/product/category/CategoryRepository",
		Iface: reflect.TypeOf((*CategoryRepository)(nil)).Elem(),
		Impl:  reflect.TypeOf(categoryRepository{}),
		LocalStubFn: func(impl any, caller string, tracer trace.Tracer) any {
			return categoryRepository_local_stub{impl: impl.(CategoryRepository), tracer: tracer, createMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "Create", Remote: false, Generated: true}), deleteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "Delete", Remote: false, Generated: true}), findAllMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "FindAll", Remote: false, Generated: true}), findByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "FindById", Remote: false, Generated: true}), updateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "Update", Remote: false, Generated: true})}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return categoryRepository_client_stub{stub: stub, createMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "Create", Remote: true, Generated: true}), deleteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "Delete", Remote: true, Generated: true}), findAllMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "FindAll", Remote: true, Generated: true}), findByIdMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "FindById", Remote: true, Generated: true}), updateMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "cakho.com/tudye/internal/product/category/CategoryRepository", Method: "Update", Remote: true, Generated: true})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return categoryRepository_server_stub{impl: impl.(CategoryRepository), addLoad: addLoad}
		},
		ReflectStubFn: func(caller func(string, context.Context, []any, []any) error) any {
			return categoryRepository_reflect_stub{caller: caller}
		},
		RefData: "",
	})
}

// weaver.InstanceOf checks.
var _ weaver.InstanceOf[CategoryRepository] = (*categoryRepository)(nil)

// weaver.Router checks.
var _ weaver.Unrouted = (*categoryRepository)(nil)

// Local stub implementations.

type categoryRepository_local_stub struct {
	impl            CategoryRepository
	tracer          trace.Tracer
	createMetrics   *codegen.MethodMetrics
	deleteMetrics   *codegen.MethodMetrics
	findAllMetrics  *codegen.MethodMetrics
	findByIdMetrics *codegen.MethodMetrics
	updateMetrics   *codegen.MethodMetrics
}

// Check that categoryRepository_local_stub implements the CategoryRepository interface.
var _ CategoryRepository = (*categoryRepository_local_stub)(nil)

func (s categoryRepository_local_stub) Create(ctx context.Context, a0 product.Category) (err error) {
	// Update metrics.
	begin := s.createMetrics.Begin()
	defer func() { s.createMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "category.CategoryRepository.Create", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Create(ctx, a0)
}

func (s categoryRepository_local_stub) Delete(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	begin := s.deleteMetrics.Begin()
	defer func() { s.deleteMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "category.CategoryRepository.Delete", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Delete(ctx, a0)
}

func (s categoryRepository_local_stub) FindAll(ctx context.Context) (r0 []product.Category, err error) {
	// Update metrics.
	begin := s.findAllMetrics.Begin()
	defer func() { s.findAllMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "category.CategoryRepository.FindAll", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.FindAll(ctx)
}

func (s categoryRepository_local_stub) FindById(ctx context.Context, a0 string) (r0 product.Category, err error) {
	// Update metrics.
	begin := s.findByIdMetrics.Begin()
	defer func() { s.findByIdMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "category.CategoryRepository.FindById", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.FindById(ctx, a0)
}

func (s categoryRepository_local_stub) Update(ctx context.Context, a0 product.Category) (err error) {
	// Update metrics.
	begin := s.updateMetrics.Begin()
	defer func() { s.updateMetrics.End(begin, err != nil, 0, 0) }()
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "category.CategoryRepository.Update", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Update(ctx, a0)
}

// Client stub implementations.

type categoryRepository_client_stub struct {
	stub            codegen.Stub
	createMetrics   *codegen.MethodMetrics
	deleteMetrics   *codegen.MethodMetrics
	findAllMetrics  *codegen.MethodMetrics
	findByIdMetrics *codegen.MethodMetrics
	updateMetrics   *codegen.MethodMetrics
}

// Check that categoryRepository_client_stub implements the CategoryRepository interface.
var _ CategoryRepository = (*categoryRepository_client_stub)(nil)

func (s categoryRepository_client_stub) Create(ctx context.Context, a0 product.Category) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.createMetrics.Begin()
	defer func() { s.createMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "category.CategoryRepository.Create", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s categoryRepository_client_stub) Delete(ctx context.Context, a0 string) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.deleteMetrics.Begin()
	defer func() { s.deleteMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "category.CategoryRepository.Delete", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s categoryRepository_client_stub) FindAll(ctx context.Context) (r0 []product.Category, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.findAllMetrics.Begin()
	defer func() { s.findAllMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "category.CategoryRepository.FindAll", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	var shardKey uint64

	// Call the remote method.
	var results []byte
	results, err = s.stub.Run(ctx, 2, nil, shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_Category_75251510(dec)
	err = dec.Error()
	return
}

func (s categoryRepository_client_stub) FindById(ctx context.Context, a0 string) (r0 product.Category, err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.findByIdMetrics.Begin()
	defer func() { s.findByIdMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "category.CategoryRepository.FindById", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

func (s categoryRepository_client_stub) Update(ctx context.Context, a0 product.Category) (err error) {
	// Update metrics.
	var requestBytes, replyBytes int
	begin := s.updateMetrics.Begin()
	defer func() { s.updateMetrics.End(begin, err != nil, requestBytes, replyBytes) }()

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "category.CategoryRepository.Update", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
		}
		span.End()

	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	requestBytes = len(enc.Data())
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	replyBytes = len(results)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

// Note that "weaver generate" will always generate the error message below.
// Everything is okay. The error message is only relevant if you see it when
// you run "go build" or "go run".
var _ codegen.LatestVersion = codegen.Version[[0][24]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.24.2 (codegen
version v0.24.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// Server stub implementations.

type categoryRepository_server_stub struct {
	impl    CategoryRepository
	addLoad func(key uint64, load float64)
}

// Check that categoryRepository_server_stub implements the codegen.Server interface.
var _ codegen.Server = (*categoryRepository_server_stub)(nil)

// GetStubFn implements the codegen.Server interface.
func (s categoryRepository_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Create":
		return s.create
	case "Delete":
		return s.delete
	case "FindAll":
		return s.findAll
	case "FindById":
		return s.findById
	case "Update":
		return s.update
	default:
		return nil
	}
}

func (s categoryRepository_server_stub) create(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 product.Category
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Create(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s categoryRepository_server_stub) delete(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Delete(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s categoryRepository_server_stub) findAll(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.FindAll(ctx)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Category_75251510(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s categoryRepository_server_stub) findById(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.FindById(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s categoryRepository_server_stub) update(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 product.Category
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Update(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

// Reflect stub implementations.

type categoryRepository_reflect_stub struct {
	caller func(string, context.Context, []any, []any) error
}

// Check that categoryRepository_reflect_stub implements the CategoryRepository interface.
var _ CategoryRepository = (*categoryRepository_reflect_stub)(nil)

func (s categoryRepository_reflect_stub) Create(ctx context.Context, a0 product.Category) (err error) {
	err = s.caller("Create", ctx, []any{a0}, []any{})
	return
}

func (s categoryRepository_reflect_stub) Delete(ctx context.Context, a0 string) (err error) {
	err = s.caller("Delete", ctx, []any{a0}, []any{})
	return
}

func (s categoryRepository_reflect_stub) FindAll(ctx context.Context) (r0 []product.Category, err error) {
	err = s.caller("FindAll", ctx, []any{}, []any{&r0})
	return
}

func (s categoryRepository_reflect_stub) FindById(ctx context.Context, a0 string) (r0 product.Category, err error) {
	err = s.caller("FindById", ctx, []any{a0}, []any{&r0})
	return
}

func (s categoryRepository_reflect_stub) Update(ctx context.Context, a0 product.Category) (err error) {
	err = s.caller("Update", ctx, []any{a0}, []any{})
	return
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_Category_75251510(enc *codegen.Encoder, arg []product.Category) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Category_75251510(dec *codegen.Decoder) []product.Category {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]product.Category, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}
